{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport factorialln from '@stdlib/math-base-special-factorialln';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a function to retrieve elements of the series \\\\( \\sum_{k=0}^{\\infty} \\frac{ \\lambda^k \\log(k!) }{ k! } \\\\).\n*\n* @private\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} function to retrieve series elements\n*/\nfunction seriesClosure( lambda ) {\n\tvar lk;\n\tvar k;\n\tk = 1;\n\tlk = lambda;\n\treturn seriesElement;\n\n\t/**\n\t* Returns the current series element.\n\t*\n\t* @private\n\t* @returns {number} series element\n\t*/\n\tfunction seriesElement() {\n\t\tk += 1;\n\t\tlk *= lambda;\n\t\treturn lk * factorialln( k ) / factorial( k );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~2.508\n*\n* @example\n* var v = entropy( 1.0 );\n* // returns ~1.305\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( lambda ) {\n\tvar gen;\n\tvar out;\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tgen = seriesClosure( lambda );\n\tout = lambda * ( 1.0-ln(lambda) );\n\tout += exp( -lambda ) * sumSeries( gen );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n"],"names":["entropy","lambda","gen","out","isnan","NaN","lk","k","factorialln","factorial","seriesClosure","ln","exp","sumSeries"],"mappings":";;6kBAoFA,SAASA,EAASC,GACjB,IAAIC,EACAC,EACJ,OAAKC,EAAOH,IAAYA,EAAS,EACzBI,IAEQ,IAAXJ,EACG,GAERC,EAtDD,SAAwBD,GACvB,IAAIK,EACAC,EAGJ,OAFAA,EAAI,EACJD,EAAKL,EASL,WAGC,OADAK,GAAML,GACMO,EAFZD,GAAK,GAE0BE,EAAWF,EAC1C,CACF,CAoCOG,CAAeT,GACrBE,EAAMF,GAAW,EAAIU,EAAGV,IACxBE,GAAOS,GAAMX,GAAWY,EAAWX,GAEpC"}